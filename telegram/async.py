# –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update                    
import requests
import aiohttp
from telegram.constants import MessageLimit
# from dotenv import load_dotenv
# load_dotenv("../.env")

# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥–µ
TOKEN = "7659555766:AAHeC81MyIRCz_onUkTdZJhfdyS9tGxgg7A"

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã Sirius Future!")

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# async def text(update, context):

#     # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –±–∞–∑–∞ Sirius Future
#     param = {
#         'text': update.message.text
#     }    
#     async with aiohttp.ClientSession() as session:
#         async with session.post('http://127.0.0.1:8000/api/get_answer_async', json = param) as response:

#             # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
#             answer = await response.json()

#             # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             await update.message.reply_text(answer['message'])   
            
                  
async def text(update, context):
    param = {
        'user_id': update.message.from_user.id,
        'text': update.message.text
    }

    async with aiohttp.ClientSession() as session:
        async with session.post('http://127.0.0.1:8000/api/get_answer_async', json=param) as response:
            if response.status == 200:
                data = await response.json()
                answer = data['message']
               # chunks = data['chunks']

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(answer)

                # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                # if len(chunks) > MessageLimit.MAX_TEXT_LENGTH:
                #     # —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                #     for i in range(0, len(chunks), 4000):
                #         await update.message.reply_text(chunks[i:i+4000])
                # else:
                #     await update.message.reply_text(f"üìÑ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏:\n{chunks}")
            else:
                error_msg = await response.text()
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {error_msg}")


# —Ñ—É–Ω–∫—Ü–∏—è "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
def main():

    # —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).connect_timeout(20).build()

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT, text))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–Ω–∞–∂–∞—Ç—å Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞)
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')    
    application.run_polling()
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

# –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    main()
